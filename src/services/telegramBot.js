import axios from 'axios';
import { supabase } from '../supabaseClient';

class TelegramBotService {
  constructor() {
    this.token = process.env.REACT_APP_TELEGRAM_BOT_TOKEN;
    if (!this.token) {
      console.error('‚ùå Telegram Bot Token not found in environment variables');
    }
    this.baseUrl = `https://api.telegram.org/bot${this.token}`;
  }

  // Send payment request message to customer
  async sendPaymentRequest(order) {
    try {
      if (!order.chat_id) {
        throw new Error('Chat ID not found for this order');
      }

      if (!this.token) {
        throw new Error('Telegram bot token not configured');
      }

      // Parse order items
      const items = this.parseOrderItems(order.items);
      
      // Format product list
      const productList = items.map(item => 
        `‚Ä¢ ${item.quantity} x ${item.name} - ${item.price.toLocaleString('ru-RU')} —Å—É–º`
      ).join('\n');

      const totalAmount = parseFloat(order.total_price).toLocaleString('ru-RU');

      const message = `
üí≥ *–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É*

–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ${order.order_number}

üõí –ó–∞–∫–∞–∑–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:
${productList}

üí∞ –û–±—â–∞—è —Å—É–º–º–∞: *${totalAmount} —Å—É–º*

–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–∞—Ä—Ç—É:
üí≥ Uzcard: 5614 6822 0446 9599
üë§ –í–ª–∞–¥–µ–ª–µ—Ü –∫–∞—Ä—Ç—ã: ORIPOV BAKHTIYOR

–ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã.
      `.trim();

      const response = await axios.post(`${this.baseUrl}/sendMessage`, {
        chat_id: order.chat_id,
        text: message,
        parse_mode: 'Markdown'
      });

      console.log('‚úÖ Payment request sent successfully');
      return response.data;
    } catch (error) {
      console.error('‚ùå Error sending payment request:', error.response?.data || error.message);
      throw error;
    }
  }

  // Handle incoming messages (for webhook)
  async handleIncomingMessage(update) {
    try {
      const message = update.message;
      if (!message) return;

      const chatId = message.chat.id;
      const text = message.text;
      const photo = message.photo;

      console.log('üì® Incoming message:', { chatId, text, hasPhoto: !!photo });

      // Handle photo (screenshot)
      if (photo && photo.length > 0) {
        await this.handlePaymentScreenshot(chatId, photo);
      } else if (text) {
        await this.handleTextMessage(chatId, text);
      }
    } catch (error) {
      console.error('‚ùå Error handling incoming message:', error);
    }
  }

  // Handle payment screenshot
  async handlePaymentScreenshot(chatId, photo) {
    try {
      // Get the highest resolution photo
      const fileId = photo[photo.length - 1].file_id;
      
      // Get file info to get the file path
      const fileResponse = await axios.get(`${this.baseUrl}/getFile?file_id=${fileId}`);
      const filePath = fileResponse.data.result.file_path;
      
      // Construct the direct URL to the image
      const imageUrl = `https://api.telegram.org/file/bot${this.token}/${filePath}`;

      console.log('üì∏ Processing payment screenshot:', { chatId, fileId, imageUrl });

      // Find order by chat_id
      const { data: orders, error: findError } = await supabase
        .from('orders')
        .select('*')
        .eq('chat_id', chatId)
        .order('created_at', { ascending: false })
        .limit(1);

      if (findError) {
        console.error('‚ùå Error finding order:', findError);
        throw findError;
      }

      if (!orders || orders.length === 0) {
        console.log('‚ùå No order found for chat_id:', chatId);
        await this.sendMessage(chatId, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à –∑–∞–∫–∞–∑. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.');
        return;
      }

      const order = orders[0];

      // Update order with payment screenshot
      const { error: updateError } = await supabase
        .from('orders')
        .update({
          payment_screenshot: imageUrl,
          payment_status: 'paid', // Auto-update payment status
          updated_at: new Date().toISOString()
        })
        .eq('id', order.id);

      if (updateError) {
        console.error('‚ùå Error updating order:', updateError);
        throw updateError;
      }

      console.log('‚úÖ Payment screenshot saved for order:', order.order_number);

      // Send confirmation to user
      await this.sendMessage(
        chatId,
        '‚úÖ –°–ø–∞—Å–∏–±–æ! –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω. –ú—ã –ø—Ä–æ–≤–µ—Ä–∏–º –µ–≥–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–º –æ–ø–ª–∞—Ç—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n–í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –∫—Ä–∞—Ç—á–∞–π—à–∏–µ —Å—Ä–æ–∫–∏!'
      );

      // Notify admin (optional)
      await this.notifyAdminAboutPayment(order, imageUrl);

      return { fileId, imageUrl, orderId: order.id };
    } catch (error) {
      console.error('‚ùå Error handling payment screenshot:', error);
      await this.sendMessage(
        chatId,
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.'
      );
      throw error;
    }
  }

  // Send message to user
  async sendMessage(chatId, text) {
    try {
      await axios.post(`${this.baseUrl}/sendMessage`, {
        chat_id: chatId,
        text: text,
        parse_mode: 'Markdown'
      });
    } catch (error) {
      console.error('‚ùå Error sending message:', error);
    }
  }

  // Notify admin about new payment (optional)
  async notifyAdminAboutPayment(order, imageUrl) {
    try {
      // Replace with your admin chat ID
      const adminChatId = process.env.REACT_APP_ADMIN_CHAT_ID;
      
      if (!adminChatId) return;

      const message = `
üí∞ *–ù–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞!*

–ó–∞–∫–∞–∑ ‚Ññ${order.order_number}
–ö–ª–∏–µ–Ω—Ç: ${order.client_name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${order.phone}
–°—É–º–º–∞: ${parseFloat(order.total_price).toLocaleString('ru-RU')} —Å—É–º

–°–∫—Ä–∏–Ω—à–æ—Ç: ${imageUrl}
      `.trim();

      await this.sendMessage(adminChatId, message);
    } catch (error) {
      console.error('‚ùå Error notifying admin:', error);
    }
  }

  // Handle text messages
  async handleTextMessage(chatId, text) {
    try {
      // Basic responses
      const lowerText = text.toLowerCase();
      
      if (lowerText.includes('—Å—Ç–∞—Ç—É—Å') || lowerText.includes('/status')) {
        // Find user's latest order
        const { data: orders, error } = await supabase
          .from('orders')
          .select('*')
          .eq('chat_id', chatId)
          .order('created_at', { ascending: false })
          .limit(1);

        if (error || !orders || orders.length === 0) {
          await this.sendMessage(
            chatId,
            '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.'
          );
          return;
        }

        const order = orders[0];
        const statusConfig = this.getDeliveryStatusConfig(order.delivery_status);
        const paymentConfig = this.getPaymentStatusConfig(order.payment_status);

        const statusMessage = `
üì¶ *–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞*

–ó–∞–∫–∞–∑ ‚Ññ${order.order_number}
–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${statusConfig.text} ${statusConfig.icon}
–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: ${paymentConfig.text}
–°—É–º–º–∞: ${parseFloat(order.total_price).toLocaleString('ru-RU')} —Å—É–º

–î–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
        `.trim();

        await this.sendMessage(chatId, statusMessage);
      } else if (lowerText.includes('–ø–æ–º–æ—â—å') || lowerText.includes('/help')) {
        await this.sendMessage(
          chatId,
          `ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

üí≥ *–î–ª—è –æ–ø–ª–∞—Ç—ã:*
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –∏ –º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.

üìû *–ü–æ–¥–¥–µ—Ä–∂–∫–∞:*
–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.`
        );
      } else {
        // Default response for other messages
        await this.sendMessage(
          chatId,
          `–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–ø–ª–∞—Ç.\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã, –∏ —è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—é —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.`
        );
      }
    } catch (error) {
      console.error('‚ùå Error handling text message:', error);
      await this.sendMessage(
        chatId,
        '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.'
      );
    }
  }

  // Set webhook
  async setWebhook(url) {
    try {
      const response = await axios.post(`${this.baseUrl}/setWebhook`, {
        url: url
      });
      console.log('‚úÖ Webhook set successfully:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Error setting webhook:', error);
      throw error;
    }
  }

  // Delete webhook
  async deleteWebhook() {
    try {
      const response = await axios.post(`${this.baseUrl}/deleteWebhook`);
      console.log('‚úÖ Webhook deleted successfully:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Error deleting webhook:', error);
      throw error;
    }
  }

  // Get webhook info
  async getWebhookInfo() {
    try {
      const response = await axios.get(`${this.baseUrl}/getWebhookInfo`);
      return response.data;
    } catch (error) {
      console.error('‚ùå Error getting webhook info:', error);
      throw error;
    }
  }

  // Parse order items
  parseOrderItems(items) {
    try {
      if (typeof items === 'string') {
        return JSON.parse(items);
      } else if (Array.isArray(items)) {
        return items;
      }
      return [];
    } catch (error) {
      console.error('Error parsing order items:', error);
      return [];
    }
  }

  // Helper functions for status configs
  getDeliveryStatusConfig(status) {
    const configs = {
      new: { text: '–ù–æ–≤—ã–π', icon: '‚è≥' },
      processing: { text: '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ', icon: 'üîÑ' },
      delivering: { text: '–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è', icon: 'üöö' },
      completed: { text: '–ó–∞–≤–µ—Ä—à–µ–Ω', icon: '‚úÖ' },
      cancelled: { text: '–û—Ç–º–µ–Ω–µ–Ω', icon: '‚ùå' },
    };
    return configs[status] || configs.new;
  }

  getPaymentStatusConfig(status) {
    const configs = {
      pending: { text: '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã', icon: '‚è≥' },
      paid: { text: '–û–ø–ª–∞—á–µ–Ω', icon: '‚úÖ' },
      failed: { text: '–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã', icon: '‚ùå' },
    };
    return configs[status] || configs.pending;
  }

  // Check if bot token is available
  isConfigured() {
    return !!this.token;
  }
}

// Create a singleton instance
const telegramBotService = new TelegramBotService();
export default telegramBotService;